Vm0wd2QyUXlVWGxWV0d4V1YwZDRWMVl3WkRSV01WbDNXa1JTVjAxV2JETlhhMUpUVjBaS2RHVkdXbFppVkZaeVZteFZlRll5VGtsalJtaG9UVmhDVVZacVFtRlpWMDE1VTJ0V1ZXSkhhRzlVVjNOM1pVWmFjVkZ0UmxSTmF6RTFWVEowVjFaWFNraGhSemxWVmpOT00xcFZXbUZrUjA1R1drWndWMDFFUlRGV1ZFb3dWakZhV0ZOcmFHaFNlbXhXVm1wT1QwMHhjRlpYYlVaclVqQTFSMVV5TVRSVk1rcElaSHBHVjFaRmIzZFdha1poVjBaT2NtRkhhRk5sYlhoWFZtMHhORmxWTUhoWGJrNVlZbFZhY2xWcVFURlNNV1J5VjI1a1YwMUVSbGRaTUZaM1ZqSktWVkpZWkZwV1JWcHlWVEJhVDJOc2NFaGpSazVYVWpOb2IxWXhaRFJWTVVsNVZXNU9XR0pIVWxsWmJHaFRWMFpTVjFwR1RteGlSbXcxVkZaU1UxWnJNWEpqUld4aFUwaENSRlpxU2tabFZsSlpZVVprVTFKV2NIbFdWRUpoVkRKT2RGSnJaRmhpVjNoVVdWUk9RMWRHV25STlZFSlhUVmQ0V0ZaWGRHdFhSMHBJVld4c1dtSkdXbWhaTVZwaFpFZFNTRkpyTlZOaVJtOTNWMnhXWVZReFdsaFRiRnBxVWxkU1lWUlZXbUZOTVZweFUydDBWMVpyY0ZwWGExcHJZVWRGZUdOR2JGaGhNVnBvVmtSS1QyTXlUa1phUjJoVFRXNW9WVlpHWTNoaU1rbDRWMWhvV0dKRk5WUlVWbVEwVmpGU1ZtRkhPVmhTTUhCNVZHeGFjMWR0U2toaFJsSlhUVVp3VkZacVJuZFNNVkowWlVkc1UySllZM2hXYTFwaFZURlZlRmR1U2s1WFJYQnhWV3hrTkdGR1ZYZGhSVTVVVW14d2VGVnRNVWRWTWtwV1lrUmFXR0V4Y0hKWlZXUkdaVWRPU0U5V1pHaGhNSEJ2Vm10U1MxUXlVa2RUYmtwaFVtMW9jRlpxU205bGJHUllaVWM1YVUxcmJEUldNV2h2V1ZaS1IxTnVRbFZXTTFKNlZHdGFZVkl5UmtoUFYyaHBVbGhCZDFkV1ZtOVVNVnAwVW01S1ZHSlhhR0ZVVmxwM1pXeHJlVTFWWkZOaVJrcDZWa2N4YzFVeVNuSlRiVVpYVFc1b1dGbHFTa1psUm1SWldrVTFWMVpzY0ZWWFYzUnJWVEZzVjFWc1dsaGlWVnBQVkZaYWQyVkdWWGxrUkVKWFRWWndlVmt3V25kWFIwVjRZMFJPVjJGcldreFdha3BQVWxaa2MxcEhiRmhTVlhCS1ZtMTBVMU14VlhoWFdHaFlZbXhhVjFsc1pHOVdSbXhaWTBaa2JHSkhVbGxhVldNMVlWVXhXRlZyYUZkTmFsWlVWa2Q0VDFOR1ZuVlViRnBvWVRCd05sWkhkR0ZXYlZaWVZXdG9hMUl5YUhCVmJHaENaREZhYzFwRVVtcE5WMUl3VlRKMGIyRkdTbk5UYkdoVlZsWndNMVpyV21GalZrcDBaRWQwVjJKclNraFdSM2hoVkRKR1YxTnVVbEJXUlRWWVZGYzFiMWRHWkZkWGJFcHNVbTFTZWxsVldsTmhWa3AxVVc1b1YxWXphSEpXVkVaelZqRldjMWRzYUdsaVZrcDZWMWQwWVdReVZrZFdibEpPVmxkU1ZsUlhkSGRTTVZsNVpVaGtXR0pHY0ZoWk1HUnZWMjFGZVZWclpHRldNMmhJV1RJeFMxSXhjRWhpUm1oVFZsaENTMVp0TVRCVk1VMTRWbGhvV0ZkSGFGbFpiWGhoVm14c2NscEhPV3BTYkhCNFZrY3dOV0V5U2tkalJXaFhZbFJCTVZaWGMzaFhSbFoxWTBaa1RsWXlhREpXYWtKclV6RktjazVXWkZaaVJscFlWRlJLYjFOV1draGxSMFpYVFd4S1NWWlhkRzloTVVwMFZXNUNWMkpIYUVSVWJYaGhWbFpPVlZKc1ZrNVdia0YzVmxjd01WTXhVWGhYYms1VVlrZG9WbFpzV25kTk1WcHlWMjFHYWxack5YbFhhMXBQWVZaS2NtTkVXbGRpUjA0MFdYcEdWbVF3TVVsaFJrNW9Za2hDV1ZkV1pEQmtiVkY0VjJ4V1UySkdjSE5WYlRGVFRWWlZlV042UmxoU2EzQmFWVmMxYjFZeFdqWlJhbEphWVd0YVlWcFZXbGRqTWtaR1QxWmthR1ZzV2paV01XUXdXVmROZDAxSWFGaFhSM2hQVm14a1UxWXhVbGhrU0dSVFRWWktlbGxWYUd0WFIwcEhZMFpvV2sxR1NsQldNakZHWlZaV2NscEhSbGROTW1oSlYxUkplRk14U1hoalJXaHBVbTFvVkZac2FFTlRNVnAwVFZSQ1ZrMVZNVFJXYkdodlYwWmtTR0ZHYUZwaVdHaG9WbXBHYzJNeVJrWlViR1JUWWxob05WWnRNREZoTVZsNFYyNU9hbEpGU21oV2JHUk9UVlphV0dNemFGaFNiRm94V1RCYWExUnNXWGxoUkVwWFlXdEtjbFY2Umt0amF6VlhXa1phYVZKc2NGbFdSbEpMWWpGT1YxZHJhR3hTTUZwWVZGZDRTMU5XV2xoa1J6bG9UVlZ3TUZsVldsTldWbHBYWTBkR1ZWWnNjR2haZWtaM1VsWldkR05GTlZkTlZXd3pWbXhTUzAxSFNYbFNhMlJVWW1zMVZWbHJaRzlXYkZwelYyNWtUazFXY0hsV01qRkhZV3hhY21ORVFtRlNWMUYzVm1wS1MyTnNUbkpoUm1SVFRUSm9iMVpyVWt0U01XUkhVMnhzWVZJelFsUldhazV2VjFaa1dHVkhPVkpOVmtwSVZsYzFTMWRIU2taalNFNVdZbFJHVkZwWGVITldiR1J6Vkcxb1UxWkZXalpXVkVreFlURlplRmRZY0ZaaVYyaFhXbGQwWVZsV2NGWlhiR1JxVFd0YVIxUXhXbXRoUjFaelYycGFWMDFYVVhkWFZtUlNaVlphY2xwR1pGaFNNMmg1Vmxkd1QxVXlTWGhpU0U1WFltMVNXRlJXWkRSTlZtdDNWbXBDVjAxcmNFaFphMUpoVjJ4YVYxTnNRbGROYWtaSFdsWmFWMk5zY0VoU2JHUlhUVlZ3VWxac1VrTldhelZYVjFob2FsSlhVbWhWYlhNeFYwWlpkMVpyZEU1aVJuQXdWRlpTUTFack1WWk5WRkpYVm0xb2VsWnNXbXRUUjFaSFYyeHdWMUpXYjNwWFZsWmhWakpPVjFSdVVsQldiVkpVV1d0V2QxZHNXa2RYYlhCUFZqQndTVlV5ZEc5V2JVcElaVWRvVjJKSFVrOVVWbHB6VmpGYVdXRkdhRk5pUm5BMVYxWldZV0V4VW5SU2JrNVlZa1phV0ZsVVNsSk5SbVJYVjJ0d2JGSnNTakZXVjNoUFlWWkplRk51WkZkaVdGSllWbTB4VW1WR1pIVlNiRTVwVmxad2FGWnRjRWRUTVVsNFZXNU9XR0pWV2xkVmJYaDNUVVphV0U1VlRsZE5hM0JKV1ZWV1UxWnJNVmRqUjJoYVRWWndVRmt4V2xkak1XUnlUbFprVGxaWGQzcFdiWGhUVXpBeFNGTlliRk5oTWxKVldXMXpNVlpXYkhKYVJ6bFhZa1p3ZWxZeU5XdFVhekZYWTBoc1YwMXFSa2haVjNoaFkyMU9SVkpzYUdoTldFSlJWbXRrTkZsWFRuUlVhMVpYWWtkU1ZGUlVTbTlpTVZweVZXdDBVMDFXYkRSWk1GWmhXVlpLY2s1WE9WcGhNbWhFVmpGYWExZEhWa2RVYkU1b1pXdGFTVlpxU2pSV01WVjVVMnRzVW1Kck5WZFpiRkpIVmtaWmVXVkhkR3BpUm5CV1ZXMTRhMVJzV25WUmFscFlWa1ZLYUZacVJtdFNNV1JaWTBaYWFXRXpRbGxXYlhSWFdWZFdjMWR1UmxOaVIxSnhWRlprVTJWc2JGWmFTRTVvVm14d2VWa3dXa2RXTWtWNFkwZG9XRlp0VWxOYVZscGhZMnh3UjFwR2FGTk5NbWcxVm14a2QxRXhiRmhVYTJSWFlteEtjbFV3VlRGVU1WSlhWMnQwYkdKR2NEQlViR1F3VmpBeFJWSnJXbFppV0VKSVZqSjRZVll4VG5OUmJHUm9ZVE5DU1ZkVVNqUmhNazUwVm10a1lWSXlhRzlVVkVKTFZXeGFjMVZyVGxkaGVsWllWakZvYzFVeVJYbGhSemxXWWtaS1dGWXdXbk5rUjFKR1pFVTFhVkp1UVhkWGJGWnFUbGRGZDAxV1dtbFNSbHBYV1d0a2IyUnNaRmRYYTNSWVVteGFlbFp0ZUhkaFZtUkhVMWh3V0ZZelFraFdha3BQVmpGV2RWTnNWbWxTTVVwVlYxZDRiMkl4YkZkYVJsWlNZbFZhYjFSWGRGZE5NVkpYVjIxMGFHSkZjSHBaTUZwclZqSkdjazVZV2xwTmJtaG9XVEo0WVZkWFJraGpSMnhYVjBWS1NGWnRlR3RPUjBWNFZXNU9XRmRIZUc5VmExWjNWMFpzV0dSRmRHcGlSbGt5VlcxME1HRnRSalpXYkdoWVlURndjbGxXV2t0ak1rNUhZa1pvVjAweFNqSldWbEpMVTIxV1IyTkZiRlZpUjJod1ZteGFkMWRHV2tkWGJVWnFUVVJXU0ZZeGFITlVNVnB5VGxjNVZWWnNXak5VVlZwelZteGtjMVJzYUdsV1dFSkpWMVJDVjA1R1duSk5XRlpvVTBWd1lWcFhkR0ZoUm5CR1ZsUldWMDFXY0hsVWJGcHJZVmRGZDFkWWNGZGlXR2hVVlhwQmVGTkdTbGxoUm1ob1RXMW9WbGRYTVRSWlZsVjRZa2hLWVZKNmJGbFZiVEUwWlZaWmVVNVhkRlZoZWtaYVZWZDRjMWxXV2xoaFJYaGFZVEZ3WVZwVldtdGpiVXBIVjIxc1YxSldXWHBXYlRGM1V6Rk5lVlJ1VGxWaWEzQnZWVzB4VTFaR1VsVlRiVGxwVFZad2VWWlhkREJWTURGWFlrUlNWMUo2VmxCWFZscEtaVmRHUms5V1ZsZE5NbWhOVm1wR1lXRXhaRWhXYTJoUVZtdHdUMVpzVWtaTlJtUlZVVzFHV2xac2JEUlhhMVp2WVVaS2MxTnNXbGRpVkVaVVZtdGFVMVl4WkhOWGJYaFhUVVJSZVZaWE1UUmlNVlY1VWxod1VtSlZXbGhXYlRGT1pVWnNjVkpzY0d4U2JWSmFXVEJrYjFaR1NsbFJiV2hZVm0xUmQxZFdaRmRqTVdSMVVteE9hVmRHU25sV2JURjZUVmRXYzFwSVNsaGlXRkpYVkZaYWQwMVdWbGhqUm1SWFRVUkdXVlpXYUd0WFJscDBWV3M1WVZKRlJqUlZNV1JIVTBaS2MxVnNUbGhTVlhCaFZtcEdhMDVHV1hoaVJtaFZZVEpTV0ZsdGVFdGpiRlYzV2taT1ZVMVdXakJhVldoclYwWmFkR1JFVGxkaVdFMHhWakJhU21ReVRrWmhSbkJPVW01Q01sWnFTbnBsUms1SFZtNVdXR0pIVWs5WmJURnZZakZhY1ZGdFJsZE5helY2V1RCV2IxVXlTa2hWYXpsVlZucEdkbFV5ZUZwbFJsWnlZMGQ0VTJGNlJUQldWRVp2WXpGVmVWSlliR2hTZW14WFdXdGFTMWRHV1hkWGJrNXJVakZLUjFwRlZURmhWa3AxVVZoa1YxSnNjRlJWVkVaaFkyc3hWMWRyTlZkU2EzQlpWbTAxZDFZeFdrZFhia1pVWVRGd2MxWnRlR0ZOUm14V1YyMUdWV0pGY0RGVlZ6QTFWakpLV1ZGcmFGcGxhM0JQV2xWa1QxSnRSa2RSYkdScFZtdHdWbFl4WkRCaU1VVjNUbFprV0dKcldsVldNR1J2VmtaU1YxZHVaR3hpUmxZMVZHeGFUMVl5U2xaalJXeGhWbGRTZGxadE1VdFNNazVGVkd4d1RtSnRhRFpXYlhoaFVqRmtXRkpyWkdoU2F6VlBWbTAxUTFOc1dYaFhiR1JhVmpCV05GWlhOVTlYUm1SSVpVYzVWbUV4V2pOV01GcFRWakZrZFZwSGFGTmlSbXQ1VmxjeE1FMUhSbkpOVm1SVVlXdGFXRlpxVG05U1JscHhVMnQwVTAxck5VaFphMXB2VmpBd2VGTnFTbGRXYkVwSVdWUkdXbVZHY0VsVGJXaFRUVEZLVlZaR1ZtRmtNa1pIVjI1U2FsSlhVbFZVVmxVeFYwWlplV1ZIT1doTlZXOHlXV3RqTlZaV1duTlhhazVWVmxad2FGWXdWVEZXYkZKeldrVTFhRTB3U2t0V01WcFhWakZWZUZkdVNrNVdiVkp4VlRCV2QxZEdiSEpYYm1SVVVtNUNSMWRyV2s5V1JrbDNZMFZrVldKR2NISlpWbVJHWkRGa1dXTkdaR2xYUjJoVlZsaHdRbVZHVGtkVWJHeG9VbTFvY0ZsclZuZFdiR1JYVld0MFZrMVdjRmhaYTJoTFdWWktObUpHYUZwaE1YQXpWRlZhZDFadFJraGtSbFpvWld0YVdWZFhkRk5VTVZsM1RWaEdWMkpGU2xoVmExWjNWRVpXZEUxVk9WUldNRFZJV1ZWa2IxUnRTa1pYV0hCWFlsUkdNMVY2Ums1bFJrNTFWV3hXYUUxV2NGcFhWM1JyWWpGa1IySklTbGhpYlZKelZtMHhVMWRzYTNkV2JYUlhUV3R3V0ZZeWVHOVdNVW8yVm14b1YyRXlVa3hWYlhNeFYwVTVWMk5HYUZSU1ZYQmFWbTF3UjFsV2JGZFRXR2hoVTBaS1ZGbHJXa3RVTVZwMFpVaGtWRlp0VWxaVlYzaHJWakF4VjFacVZsWmlSMmd6VmxjeFMyTnJOVmRhUm5CcFVtdHdTVlp0ZEdGWGJWWllWbXRvYTFJelFuQlZiVFZEVmpGYVdFMVVVbWxOVmxZMVZXeG9kMVZ0U2toVmJHaGFZa1pLUjFSVlduZFNWa3AwWkVaT1RsWXhTalJXYWtvMFV6SkdTRk5yV21wU2JWSlpWbTE0UzFOR2NFVlRhemxxVFZad01WVnRlRTloVmtsNFUyNW9WMUpzY0haVlZFWlBWakZhZFZWdGVGTldSM2gzVmxkd1EyUXhaSE5pUmxwV1lsVmFXRlJWVWtkWFZscFhZVWQwV0ZKc2NEQldWM2hQV1ZaYWMyTkhhRnBOYm1nelZXcEdkMU5IU2tkVWF6VlhWMFZHTlZadE1UUmhhekZZVlZoc1ZWZEhlRlZXTUdSdlZqRnNjbHBHVGxoV2JYZ3dWRlphVDJGck1WaGxTR3hYVFdwV1VGWkVSbUZrUjFKRlZHeGthVlpGVmpOV2JYQkNaVWRPYzFwR1ZsUmlSbkJ3VmpCV1MxTldXbkZUYWxKYVZtMVNTVlZ0ZEdGaVJrcDBWV3M1V21KVVJuWlpha1pyVjFkT1JtUkdWazVXVkZaWlZtdGpNVlF4WkVoU2FscFhZa1pLVmxadGVHRk5NVlY1WlVkR2FrMVhkRFpaVlZVMVZUSktXV0ZHY0ZkaE1YQjJXV3BLUjJNeFRuTmhSMmhVVWxWd1dGZFhlRzlVYlZaSFYydFdVMkpWV25GVVZtUlRaV3hyZDFwRVVtaFdhM0F4VlZab2ExZEhTa2RYYmtwV1lXdGFhRmt5YzNoV01XUjBZa1pPVTJFelFtOVdNVnBUVWpKUmVWUnVUbGhYUjFKb1ZXeG9VMk5XYkhOV1ZFWlRUVlpHTkZZeU1UQmhSbHAwVld0c1dHRnJOVE5XYWtwSFkyeE9kR0ZHY0d4aE1YQjVWbXBDWVZVeVRuTmpSV2hUWWtVMWNGWnRkSGRXYkZsNFdrUkNXbFl4UmpOVWJGcHJWMGRLYzFOck9WZGhNVnBNVjFaYVlXUkhWa1phUlRsVFlraEJkMWRzVm1GaE1WcFlVMnRhYWxKWGVHRlVWRTVEWlZaV1IxSlViRkZWVkRBNQ==