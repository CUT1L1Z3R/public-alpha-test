Vm0wd2QyUXlWa1pPVldoVFlteEtXRmxVU2xOWFZsbDNXa1JTVjFKc2JETlhhMUpUVmpGS2RHVkliRmhoTVVwVVZtcEdZV1JIVmtsalJuQlhWakF3ZUZacVNqUlpWMDE0Vkc1T1dHSkdjSEJXTUZwSFRURmtWMWRzV214U2JWSkpWbTEwYzJGV1NuUmhSemxWVm14YU0xWnNXbXRYUjFKSVVteHdWMDFWY0ZsV1Z6QXhWREpHYzFOdVRtcFRSVXBZVkZWYVlWUkdWWGhYYkhCc1VtMVNNRlZ0TVc5VWJGcFpVV3BXVjFJemFGaFpla1p6VmpGT2RWWnNTbWxoZWxab1ZtcENiMUV4WkVkWGJrNVlZbGhTY1ZsclpEQk9iR3hXVjIxR1ZXSkdjRlpXYlhSM1ZqRmFObEpZWkZwaGEzQk1WV3BHVDJSV1duTlRiV3hUVFRKb1dWWXhaREJaVm14V1RWaE9hbEp0YUhOVmFrNVRWMFphZEdONlJsaGlSMUo1Vm14U1YxWXdNVVZTYkdSWFRWWktTRlpxU2tabFZsSlpZVVprVjFKWVFrbFdiWEJIVkRGa1dGTnJhR2hTYkVwVVZqQldTMWRXV1hoWGJYUk9VbTE0V1ZWdGRHdFdiVXBIVjJ4U1dtSkhhRlJXTUZwVFZqSkdSbFJzVWxkaWEwcElWakowYjFReFduSk5WbWhXWVRKNFdGWnRlRXRUUmxweFVtdDBhazFyTlVwV01uaHZWakpLVjFOcmFGaGlSbkJvVmtSS1RtVldTbkpoUjNoVFlrVndWVlp0ZEdGWlZtUkhWMjVPWVZKRlNsaFVWM2hIVGtaWmVXUkhkR2hXYXpWSFdUQmtiMVp0U2xsVVdHaFhZa1p3V0ZwRlpGTlRWbkJHVGxaa2FWSnVRbUZXYTFwaFlqRlJlRmRZYUZSaWEzQnhWVzE0ZDFZeGJISmFSemxzWWtac00xWXllSGRpUjBwV1YydHdWbUpZYUZoWlZscExZekZrVlZGc2FHaE5WbkJ2Vmxod1MxUnRWbGRUYmtwaFVqQmFWRmxzWkc5V1ZtUllUVlJDVkUxc1NucFdNalZQV1ZaT1NGVnNVbFZXYlZKVVZGVmFZVll5UmtoUFZuQlhZVE5CZDFac1kzaGlNVnB5VFZWa1YxZEhhR0ZVVmxwM1ZrWlpkMXBGT1U5aVJWcDVWR3hhYTJGV1NsZGhNMlJYVFZad1dGZFdXbEpsVmtweVdrWm9hVkpzY0ZSWFZtUTBVekZzVjFWc1dtRlNlbXh4V1d0YWMwMHhaSEpXYWtKV1RXdFpNbFZ0ZEdGV2JVcFpZVVJPVjJGcldreFdha3BLWlcxT1IxcEhhR2hOV0VKMlZtMHhkMU14VlhoVWEyUlVZbXR3YjFWcVNtOVdSbXh6VjJ0MFZsSnNjRWhYVkU1dllVZEtWMWRzYUZkTlYyaDJWakJrUzFOR1ZuVlJiRlpYWWtoQ1dWWkhlR0ZaVm1SSVZXdG9VRlp0VWxSVVZWcGFUVVphY1ZOcVVsZE5WbXd6VkZaV2IxWnRTa2RUYkdoV1lURmFhRll3V2xwbFJuQkdUMVpTVjJGNlZYZFhiRlpyWXpGVmQwMVdXbXBTYmtKWVZGWmFkMWRHWkZkWGJFcHNWbXR3ZVZsVldsTmhWa3AxVVd4d1dGWnNTa3hXVkVwSFVqRmtkVlJ0UmxObGJYaFZWbGN3ZUU1R1pGZGlSRnBWWWxoU2NGVnRkSGRsVm10M1lVYzVWMkY2Um5oVmJYUnZWakZhUmxkcmVGZE5WbkJJV1RJeFMxSXhjRWRVYld4VFltdEtNbFpxUmxOVGJWWkhWMWhvWVZKWFVsVlpiWFIzVjFac1dXTkdaRmhTYkVwWlZGWmpOVmRIU2tkalJteGhWbFp3VUZadGMzaFNWa1p4Vld4a1RtSnNTbTlXYlRCNFVqQTFkRk5yYUZCV2JGcFlWRlJHUzJJeFdsVlNiVVphVm0xU1NWWlhkRzlWUmxwMFZXeG9WVlpYYUVSV2FrWnJWMGRTU0U5V1NrNVdia0YzVmxjd01WTXlSbGhXYmtwVVlrWndZVmxyWkc5a2JGSlZVbXhrYTFJeFdrcFhhMXBUVlRGYVNHVkdhRmRTTTJob1ZrUkdVMk14VW5KWGJGSnBWbFp3V1ZaR1l6RlZNVnBIVjJ0V1ZHRjZWbk5WYlhoaFRWWmFTR1ZHVG1oU1ZFWmFWVmQ0VjFkR1duUlZXR1JoVWtWYWNsWnFSbXRrVmxaeVRsWmtWMUpzY0RaV2JHTjNaVVV4UmsxSWFHRlRSWEJZV1ZkMFMxZFdWblJrU0dSc1lrZDBNMVl5Tld0V01ERkZVbXBHV2xaV1NsQldha3BIWTIxT1IyRkdjR3hoTVhCNVYxUkdZVlV5VFhsU2EyUmhVbFJXVDFsc1pHNU5WbHAwVFVoa2EwMXNXa2hXYkdoelZtMUZlVlZzVmxwaVdFMTRXV3BHVjJNeFZuVlViR2hUWWtWd1YxWlhNVEJOUjBaV1RWWmthbE5IYUZkV2JuQkdaREZzVjFaWWFHcE5WVFV4V1RCYWQxUnNTbk5qUnpsWFlXdHdObHBFU2xkWFJrcHlZa1pPYVZKc2NGbFdiVEV3WkRGT1YxcElUbGRpVlZwWVZGWmFjMDVXVm5Sa1J6bG9UVlZ3ZWxZeWVHOVdNa1Y0VjIxb1ZXRXhjR2hXTUZWNFYxWndSMVZyTlZkTk1taGFWbXhTUzJReGJGZFdXR3hVWW14YVUxbHNWbUZaVmxweVZtNWtWMUpzY0ZkV01uaFBZV3N4VjJOR1dsZGlXR2gyVm1wS1MxSXlTWHBhUm1oWFRURktXRlpHV21GVk1rMTRZMFZhV0dKR1NsbFZNRlpMVjFaa1YxcEVRbXRoZWtaSVdXdG9SMVV5U2taT1dFcFdZbGhvYUZSV1dtRlhSMVpHVDFkb1YyRXlkekZYVmxaaFVqRlplVk5zYkZKaVJVcFlWbXRXZDFOR1ZuRlNiWFJZVm01Q1NWVnRlRTlpUjBwWllVUldWMDFYVVhkWmFrWkdaVVpPV1dGSFJsTmlSbkJYVjFkNFUyTXlTWGhpUm14cVVsZFNWRmxyV21GTlJsSnpXWHBXVjAxcmNFaFpNRkpEVjJ4YVdHRkZlRmRoYTFwTVdYcEdZV05XVW5SU2JHUlhZbXRLVWxadGNFZGhNVTE0VTFoc1ZXRXlhSE5WYWtwdlZERlNWbFp1VGs5V2JIQjRWVEp3UTJGSFNsZFhhMmhYWWxSV1ZGWnFTa3RqYXpWWFdrWndhRTFzUlhkV2FrWmhZekpOZVZKclpGVmlSMUpZV1d0YWRtUXhXa2hsUm1SVVRWWktNRlV5ZEc5V2JVcElZVVpvV21KR1NraFVWRVpoVWxaS2RGSnNaRmRoTVhBMFZtMHhOR0V4VlhkTlNHUlVZa2Q0V0ZscldtRmhSbXhWVW10MGFrMVdTakZXYlhoTFlWWk9SbE51WkZkV2VrRjRWVlJHVTFZeGNFZGlSM0JUVmpGS2VWWkdXbUZrTWxaellUTmtWMkpVYkZkVmJYaDNWbXhhZEdWR1RsZFdiSEJaV1ZWV1UxWXdNWFZoU0VwYVRXNW9XRmt5Y3pWWFIwNUdUbFprYUUwd1JYbFdiWGhUVXpBeFIySkdaRmhoTW1oVVZqQm9RMVV4YkhKYVJGSllVbTE0ZWxaWGRHdFdWVEZaVVd4a1YwMXFWbEJXYWtaaFkyczFXV0pIUmxOV2JrSlZWbXhTUzFNeFRsZFNia1pXWWtkU1dGbHNWVEJOUm1SeVZXdDBVMDFXYkRSWGEyaFBXVlpKZWxGc1VsWmlSa3BZVmpKNFlXUkhUa1pQVmxwT1lYcFdObGRYZEZOWlZscElVMnRhVDFadGFGWldhazVUWld4U2RHVklTbXROVjFKNlYydGtiMVl3TVVkaE0yeFhZbFJDTkZscVJscGxWa3AxVTJ4U2FWSXhTbGRXYlRCNFZURmFSMkpFV2xOaWJWSlZWbTE0UzAxR2JGWlhhemxYVFZWd2Vsa3dVbGRXTURGWVZWUkNWMkZyY0ZOYVZWcDNVakZ3UjFkc2FGTk5iV2haVmpGYVUxUXhWWGxUV0doWFlteEtjMVV3VlRGVlJsWjBaVWhrVGxKdGRETldiWEJEVjBaS2NtSkVUbGRpV0VKWVZtcEdXbVZ0UmtsWGJHUnBVbTVDYjFadGNFdFVNVTVZVkd0a1lWSlVWbFJVVmxaM1ZHeGFjMVZyWkZwV2JGWTFWbGQwYjFaWFJYbGhTRTVXWWxSR1ZGWnJXbE5YUlRGWFUyczFWMkpJUWpSV1Z6QjRUVVpSZUZOWVpGaGliWGhXV1d0YWQyRkdXa2hsUjNSVFRWVTFlbFpYZUhkaFJURnpVMnBLVjJGclNtaFdNakZTWlVad1NWWnRSbE5OYldoVlYxZDBZV1F3TlVkWGJHaE9Wa1pLY2xSWGRGZE5NVkpYVjIwNVYySlZjRWxaVlZwelYyeGFSbU5JV2xkV1ZuQjZWakJrVG1WdFJraGpSMmhzWWtad1NGWnNZM2hPUmxsNFZXNU9XRmRIZUc5VmJYaGhWMVphZEdWSVpGZE5XRUpHVlRKNGExWkdTbk5UYm14YVlUSlNTRlpVU2t0WFIwWkpXa1prVjAweWFGVldWbU40VmpGSmVHTkZaR0ZTYkhCdlZGZDRTMlZXV2tkWGJYUldUVmRTU0ZZeU5WTlVNVnB5VGxjNVZtSllVbnBVYkZwelZteGtkRTlXWkZkaVNFSklWMVJDYjFZeFdsZFhXSEJvVTBWd1dGbFhkR0ZoUm5CR1ZsUldWMDFYVW5sVWJHUnpWVEZrUmxOcmVGZGlXR2hVVlhwQmVGSXhaRmxoUm1ob1RXeEtiMVpYZUd0aU1WbDRZa1pzYWxORk5WaFVWbHB6VFRGc1ZsWnJPV2xTYkhBeFZWZDRjMWxXV2xoVldHUlhZV3RHTkZreWVHdGpiVVpIV2taT2JHRXhiM2xXTVZwaFdWWnNWMWRZYkZWaE1YQnZWVzB4YjJOR1ZuUmxTR1JPWWtad1dGWlhkREJWTURGeVRsaHNWVlpzV25wWlZWcExZMnMxV0U5V2NGZFNWRlpGVm0xd1IxbFdaRWhWYTJSWVlYcFdXRlJWVWxkT2JHUllaRWRHV2xadGVGaFZNalZMVkRGYWMxZHNaRnBpUjJoMlZrVmFVMVpzWkhOVGJYaFRZbFpLTmxZeWRHRlpWbEp6VTJ0YVdGZEhhRmhVVjNCWFRURldObEp0ZEZSU2EzQmFXVlZhYjJGSFZuUmxSbVJZVmpOU2FGWnFRWGRsUjA1SFYyMUdVMWRHU2xWV1JtUXdaREZPUjFkWWJFNVhSVFZaVlcxMGQxWXhhM2RWYTNSWFRXdHdTVlpYY0U5V01VcEdZMFYwWVZac2NGaFdNV1JIVTBkS1IxUnNUbWxoTUhCWlZtcEdhMDFHV25KTlZtaFZZVEpTVjFsclpHOWpNVlp6WVVaT1YxWnNjREJhVlZZd1YwWktkR1ZHWkZkaVJrcFlWbXBHV21ReVRrZGFSbVJPWVd4YU5sWnRNSGhUTVdSWFVtNU9VbUpIVW5CVmJUVkRWRlphV0UxSWFGVk5WWEF3VlcxMGIxVXlTa1pPV0VKWFlsaFNNMVV5ZUdGa1IwNUdWR3hrYVZac2NFbFdNblJYWWpGWmVWSllhR3BTVkd4WVdWZHpNV1JzV1hkWGJHUnFWbXhLTUZReFZURmhWa3AwWkhwQ1YwMVdTbEJaVkVwTFVqRk9XVnBGTlZkU2JIQlpWbTF3VDFVeVRuTmlSbWhzVWxoU2NWUldWVEZsYkZaMFpVZDBWV0pGY0hwWk1GVjRWMFphUmxOdGFGcGxhM0JQV2xWYWQxTldUblJrUms1T1RVVndVVlp0Y0VOV01VMTRXa1ZrV0ZkSGVISlZhazVEVlVaYWRHVkZkR3hpUmxZMFdWVmtNR0ZIU2taalJFSmhWbGRTZGxadE1VWmxSbHBaWVVkR1YwMHlhRzlXVkVKclZqRktkRlZyWkZWaVYzaFVWakJXU2sxR1duTlZhM1JQVWpGR05WVnRlR3RXUm1SSVZXczVWazFIVW5aV01GcFhaRVV4Vms5Vk9WTmlSbkEwVmxjd2VFMUdWWGROVm1oV1lXdGFXRmxzVWtkTk1WcFZVbTFHVTJKSFVqRlpNRnByWVZaa1IxTnViRmRTYkVwTVZsY3hWMUl5VGtaYVIyaFRUVEJLVlZadGRHdE9SMFpIVjI1U2FsSlZjRTlXYlhNeFUwWnNWVlJ0ZEZoU01IQjVWR3hhYjFZeVNsVlNiRkpXVFVad2VWcEVSbk5PYkZweldrVTFhRTB3UmpSV2JGcHJUa2RKZUZwSVNrNVhSbHB2VlRCV2QxbFdjRmhrU0dSVVVteFdNMVpzVWxkWFJrbDNZMFZrVldKSFVucFdWRVpyVW14T2NtVkdaR2xYUmtwdlZqRmFhMU50VmtkV2JHeG9VbXh3Y0ZsclZuZFdWbVJZVFZSQ2EwMVdjRWhaYTFwdllXMVdjbGRzYUZwaE1YQm9XbFphWVdNeFZuSmFSbVJPVmxoQ05sWlVTalJqTVZwWFYyNU9WMWRIYUdGWlZFWjNXVlp3UlZKdGRHcGlWVFZJVjJ0Vk1XRkhSWGhYV0hCWFlsaFNjbHBYTVZkU01VNXpXa1pTYVZJemFIZFdWekI0VlRGYVIxZHVVbXRUUjFKWFZtMTRkMlZzV2xoa1JYUnBVbXRzTkZVeWRHOVdNVmw2WVVod1dsWnNjRXRhVm1SSFVqRmFjMWR0YkZkU2JIQkdWako0WVZsV2JGZFRXR2hYWW10d1ZWbHNhRzlXUmxweVZtMUdUMkpIVWxsYVJXUkhZVVV4V0ZWcVFsZGlWRlpNVmpCa1MxWlhTa2RYYkdScFZrVmFNbFpYZEdGWGJWWllWbXRzVldKSFVuQlZhazVxWlZaYWRFMUlhR2xOVmtwNlZqSjRiMVZHVGtobFJtaFhZbTVDUTFwVlduZFNWa3AwVW14a1RsWXhTbUZYVkVKaFV6SkdSazFWVmxkaVZHeFlWbXBPVTFkR1pGZFhiWFJUVFdzMVIxWXllRzloVmxwWFkwaHNWMVl6UWtoVmVrWlBWakpLUjFkc2FHbFdSM2hZVmtaYWExVXhTWGhXV0d4cVVqQmFXRlJYZEdGbFZsbDVaVVpPVjAxVmNFZFdNbmh2VjJzeGRWUnFVbGRpV0doeVdUSnpNVll4Y0VkYVIyeFVVbFZ3WVZadGNFZGhiVkYzVFZaa1UxZEhlRlpaYlhNeFYwWnNkR1ZIUm1wV2JGWXpWbXhTUjJGc1duTmpSRUpWWWtaYVVGWnJXa3RrUjFaSFdrWmthVkpyY0ZsV2JYaHJVekZLZEZOclZsVmlTRUp2VkZaV2QxZFdXblJsUjBaYVZqRktTRlp0ZUZkVmJVcEpVV3hvWVZZelVtaFdSbHByVmxaT1dXRkdWazVXV0VKWlZtdGpNVlF5Um5OVGJGWlhZbFJzWVZsVVJuZE5NVlowWlVad2JGSnRVbnBYYTFwM1ZqQXhWbUl6WkZkaVZFVXdXVlJHYTFOR1RuSmhSM2hUWWxob2FGWnFRbTlSTVU1SFlrUmFVMkpyTlhGWmExcDNaV3hyZDFwRVVtaFdhM0F4VlZkMGQxZEhSWGhYYmtwVlZsZFNTRlp0YzNoV2JGcHpWRzFvVG1KdGFGbFdhMXBxVFZkSmVWVnVUbWxTYkZwVldXdGtVMk5XYkhKV1ZFWnNWbXhHTkZZeU1VZGhSa3BWVW14d1ZsWXpVblpXYWtaTFVteGtjbHBHVms1V2JrSkZWbXhrTkZFeFdsWk5WVlpPVWtSQk9RPT0=